(define tolerance 0.00001)
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
            tolerance))
    (define (try guess)
      (let ((next (f guess)))
        (if (close-enough? guess next)
            next
            (try next))))
    (try first-guess))

(define (average x y) (/ (+ x y) 2))
(define (square x) (* x x))

(define (repeated f n)
  (if (<= n 1)
      (lambda (x) (f x))
      (lambda (x) (f ((repeated f (- n 1)) x)))
      ))

(define (average-damp f) (lambda (x) (average x (f x))))


(define (new-average f n)
  ((repeated average-damp n) f))

(define (expmod base n)
  (if (= n 1)
      base
      (* base (expmod base (- n 1)))))
(define (sqrt-new-n x n)
  (fixed-point (lambda (y) (new-average y (/ x (expmod y (- n 1))) n))
               1.0))
(define (sqrt-new-n x n)
  (fixed-point (new-average (lambda (y)
                                (/ x (expmod y (- n 1))))
                              (/ (log n) (log 2)))
               1.0))
;3.000000000000033
(sqrt-new-n 81 4)
;4.805898062426825
(sqrt-new-n 111 3)
;3.0
(sqrt-new-n 9 2)

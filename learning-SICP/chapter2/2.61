(define (element-of-set? x set)
  (cond ((null? set) false)
        ((= x (car set)) true)
        ((< x (car set)) false)
        (else (element-of-set? x (cdr set)))))

(define (intersection-set set1 set2)
  (if (or (null? set1) (null? set2))
      '()
      (let ((x1 (car set1)) (x2 (car set2)))
        (cond ((= x1 x2)
               (cons x1 (intersection-set (cdr set1)
                                          (cdr set2))))
              ((< x1 x2)
               (intersection-set (cdr set1) set2))
              ((< x2 x1)
               (intersection-set set1 (cdr set2)))))))

(define (adjoin-set x set)
  (define (iter old-set result)
    (let ((x1 (car old-set)))
      (cond ((= x1 x) set)
            ((> x x1)
             (cond ((null? (cdr old-set))
                    (append result (list x1 x)))
                   (else
                    (iter (cdr old-set) (append result (list x1))))))
            (else
             (append result (cons x old-set))))))
  (iter set '()))

(define x (list 1 2 3 5 6))
;(0 1 2 3 5 6)
(adjoin-set 0 x)
;(1 2 3 5 6)
(adjoin-set 3 x)
;(1 2 3 4 5 6)
(adjoin-set 4 x)
;(1 2 3 5 6 7)
(adjoin-set 7 x)

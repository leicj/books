(define nil '())
(define (same-parity x . y)
  (define (iter-same-parity cdr-lst car-lst)
    (cond ((and (null? cdr-lst) (even? (- car-lst x)))
           car-lst)
          ((and (null? cdr-lst) (odd? (- car-lst x)))
           nil)
          ((and (not (null? cdr-lst)) (even? (- car-lst x)))
           (cons car-lst (iter-same-parity (cdr cdr-lst) (car cdr-lst))))
          (else
           (iter-same-parity (cdr cdr-lst) (car cdr-lst)))))
  (iter-same-parity y x))

;(1 3 5 . 7)
(same-parity 1 2 3 4 5 6 7)
;(2 4 6)
(same-parity 2 3 4 5 6 7)
;(1 . 7)
(same-parity 1 6 7)

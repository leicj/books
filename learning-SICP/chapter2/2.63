(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right)
  (list entry left right))

(define nil '())
(define tree1_1 (make-tree 1 nil nil))
(define tree1_5 (make-tree 5 nil nil))
(define tree1_3 (make-tree 3 tree1_1 tree1_5))
(define tree1_11 (make-tree 11 nil nil))
(define tree1_9 (make-tree 9 nil tree1_11))
(define tree1_7 (make-tree 7 tree1_3 tree1_9))

(define tree2_11 (make-tree 11 nil nil))
(define tree2_9 (make-tree 9 nil tree2_11))
(define tree2_5 (make-tree 5 nil nil))
(define tree2_7 (make-tree 7 tree2_5 tree2_9))
(define tree2_1 (make-tree 1 nil nil))
(define tree2_3 (make-tree 3 tree2_1 tree2_7))

(define tree3_1 (make-tree 1 nil nil))
(define tree3_3 (make-tree 3 tree3_1 nil))
(define tree3_7 (make-tree 7 nil nil))
(define tree3_11 (make-tree 11 nil nil))
(define tree3_9 (make-tree 9 tree3_7 tree3_11))
(define tree3_5 (make-tree 5 tree3_3 tree3_9))

(define tree4_7 (make-tree 7 nil nil))
(define tree4_6 (make-tree 6 nil tree4_7))
(define tree4_5 (make-tree 5 nil tree4_6))
(define tree4_4 (make-tree 4 nil tree4_5))
(define tree4_3 (make-tree 3 nil tree4_4))
(define tree4_2 (make-tree 2 nil tree4_3))
(define tree4_1 (make-tree 1 nil tree4_2))

(define (element-of-set? x set)
  (cond ((null? set) false)
        ((= x (entry set)) true)
        ((< x (entry set))
         (element-of-set? x (left-branch set)))
        ((> x (entry set))
         (element-of-set? x (right-branch set)))))

(define (adjoin-set x set)
  (cond ((null? set) (make-tree x '() '()))
        ((= x (entry set)) set)
        ((< x (entry set))
         (make-tree (entry set)
                    (adjoin-set x (left-branch set))
                    (right-branch set)))
        ((> x (entry set))
         (make-tree (entry set)
                    (left-branch set)
                    (adjoin-set x (right-branch set))))))


(define (tree->list-1 tree)
  (if (null? tree)
      '()
      (append (tree->list-1 (left-branch tree))
              (cons (entry tree)
                    (tree->list-1
                     (right-branch tree))))))

(define (tree->list-2 tree)
  (define (copy-to-list tree result-list)
    (if (null? tree)
        result-list
        (copy-to-list (left-branch tree)
                      (cons (entry tree)
                            (copy-to-list
                             (right-branch tree)
                             result-list)))))
  (copy-to-list tree '()))
;(1 3 5 7 9 11)
(tree->list-1 tree1_7)
;(1 3 5 7 9 11)
(tree->list-2 tree1_7)
;(1 3 5 7 9 11)
(tree->list-1 tree2_3)
;(1 3 5 7 9 11)
(tree->list-2 tree2_3)
;(1 3 5 7 9 11)
(tree->list-1 tree3_5)
;(1 3 5 7 9 11)
(tree->list-2 tree3_5)
;(1 2 3 4 5 6 7)
(tree->list-1 tree4_1)
;(1 2 3 4 5 6 7)
(tree->list-2 tree4_1)


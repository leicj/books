(define (make-leaf symbol weight) (list 'leaf symbol weight))
(define (leaf? object) (eq? (car object) 'leaf))
(define (symbol-leaf x) (cadr x))
(define (weight-leaf x) (caddr x))

(define (make-code-tree left right)
  (list left
        right
        (append (symbols left) (symbols right))
        (+ (weight left) (weight right))))
(define (left-branch tree) (car tree))
(define (right-branch tree) (cadr tree))
(define (symbols tree)
  (if (leaf? tree)
      (list (symbol-leaf tree))
      (caddr tree)))
(define (weight tree)
  (if (leaf? tree)
      (weight-leaf tree)
      (cadddr tree)))

(define (encode-symbol symbol tree)
  (define (encode-1 symbol current-branch)
    (let ((left-branch (left-branch current-branch))
          (right-branch (right-branch current-branch)))
      (if (eq? 3 (length current-branch))
          '()
          (if (eq? symbol (symbol-leaf left-branch))
          '(0)
          (cons '1 (encode-1 symbol right-branch))))))
  (encode-1 symbol tree))

(define (decode bits tree)
  (define (decode-1 bits current-branch)
    (if (null? bits)
        '()
        (let ((next-branch
               (choose-branch (car bits) current-branch)))
          (if (leaf? next-branch)
              (cons (symbol-leaf next-branch)
                    (decode-1 (cdr bits) tree))
              (decode-1 (cdr bits) next-branch)))))
  (decode-1 bits tree))
(define (encode message tree)
  (if (null? message)
      '()
      (append (encode-symbol (car message) tree)
              (encode (cdr message) tree))))
(define (choose-branch bit branch)
  (cond ((= bit 0) (left-branch branch))
        ((= bit 1) (right-branch branch))
        (else (error "bad bit:CHOOSE-BRANCH" bit))))

(define (adjoin-set x set)
  (cond ((null? set) (list x))
        ((< (weight x) (weight (car set))) (cons x set))
        (else (cons (car set)
                    (adjoin-set x (cdr set))))))

(define (make-leaf-set pairs)
  (if (null? pairs)
      '()
      (let ((pair (car pairs)))
        (adjoin-set (make-leaf (car pair)
                               (cadr pair))
                    (make-leaf-set (cdr pairs))))))
(define (successive-merge pairs)
  (define (iter-successive-merge pairs)
    (if (eq? 1 (length pairs))
        (car pairs)
        (make-code-tree (car pairs)
                        (iter-successive-merge (cdr pairs)))))
  (iter-successive-merge pairs))
(define (generate-huffman-tree pairs)
  (successive-merge (make-leaf-set pairs)))
(define pairs (list (list 'A 4) (list 'B 2) (list 'D 1) (list 'C 1)))
(display "----")
(generate-huffman-tree pairs)
(display "-----")


(define sample-tree
  (make-code-tree (make-leaf 'A 4)
                  (make-code-tree
                   (make-leaf 'B 2)
                   (make-code-tree
                    (make-leaf 'D 1)
                    (make-leaf 'C 1)))))
(define sample-message '(0 1 1 0 0 1 0 1 0 1 1 1 0))
;(A D A B B C A)
(decode sample-message sample-tree)
;(0 1 1 0 0 1 0 1 0 1 1 1 0)
(encode '(A D A B B C A) sample-tree)

the output is:
----((leaf C 1)
 ((leaf D 1)
  ((leaf B 2) (leaf A 4) (B A) 6)
  (D B A)
  7)
 (C D B A)
 8)
-----(A D A B B C A)
(0 1 1 0 0 1 0 1 0 1 1 1 0)

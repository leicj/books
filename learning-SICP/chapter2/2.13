(define (make-interval a b) (cons a b))
(define (upper-bound interval) (max (car interval) (cdr interval)))
(define (lower-bound interval) (min (car interval) (cdr interval)))
(define (center i) (/ (+ (upper-bound i) (lower-bound i)) 2))

(define (make-interval-center-percent c pct)
  (let ((width (* c (/ pct 100.0))))
    (make-interval (- c width) (+ c width))))

(define (percent-tolerance i)
  (let ((center (/ (+ (upper-bound i) (lower-bound i)) 2.0))
        (width (/ (- (upper-bound i) (lower-bound i)) 2.0)))
    (* (/ width center) 100)))

(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))

(define x (make-interval-center-percent 20 5))
(define y (make-interval-center-percent 20 5))
;9.975062344139651 = 5 + 5
(percent-tolerance (mul-interval x y))

so let z = (mul-interval x y)
(percent-tolerance z)
=> ((z_up - z_lo) / 2) / ((z_up + z_lo) / 2) * 100
let z_up = z + pct * z / 100, z_lo = z - pct * z / 100
=> (((100z + pct * z) / 100 - (100z - pct * z) / 100) / 2)
/ (((100z + pct * z) / 100 + (100z - pct * z) / 100) / 2)
* 100
=> pct

so we just accumululate that (mul-interval x y) == pctx + pcty
after accumulate that , we find:
(mul-interval x y)
=> (pctx + ptcy) / (1 + (pctx * pcty) / 100)
so when pctx and pcty is very small, it equal to pctx + pcty

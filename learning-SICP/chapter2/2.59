(define (element-of-set? x set)
  (cond ((null? set) false)
        ((equal? x (car set)) true)
        (else (element-of-set? x (cdr set)))))

(define (adjoin-set x set)
  (if (element-of-set? x set)
      set
      (cons x set)))

(define (intersection-set set1 set2)
  (cond ((or (null? set1) (null? set2)) '())
        ((element-of-set? (car set1) set2)
         (cons (car set1) (intersection-set (cdr set1) set2)))
        (else (intersection-set (cdr set1) set2))))

(define nil '())
(define (union-set union-set1 union-set2)
  (define (iter set2 result)
    (cond ((null? set2) result)
          ((not (element-of-set? (car set2) result))
           (iter (cdr set2) (cons (car set2) result)))
          (else (iter (cdr set2) result))))
  (iter union-set2 union-set1))

(define x (list 1 2 3 4 5 6 7 8))
(define y (list 1 3 5 7 9 11))
;(1 3 5 7)
(intersection-set x y)
;(11 9 1 2 3 4 5 6 7 8)
(union-set x y)

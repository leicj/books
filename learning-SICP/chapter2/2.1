(define (new-make-rat n d)
  (cond ((or (and (positive? n) (negative? d))
              (and (negative? n) (negative? d)))
         (new-make-rat (- n) (- d)))
        (else
         (let ((g (gcd n d)))
           (cons (/ n g) (/ d g))))))
(define (numer x) (car x))
(define (denom x) (cdr x))

(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))

(define (add-rat x y)
  (new-make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))
(define (sub-rat x y)
  (new-make-rat (- (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))
(define (mul-rat x y)
  (new-make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))))
(define (div-rat x y)
  (new-make-rat (* (numer x) (denom y))
            (* (denom x) (numer y))))
(define (equal-rat? x y)
  (= (* (numer x) (denom y))
     (* (numer y) (denom x))))

(define new-one-half (new-make-rat -1 2))
(define new-one-third (new-make-rat -1 3))
;-5/6
(print-rat (add-rat new-one-half new-one-third))
;1/6
(print-rat (mul-rat new-one-half new-one-third))
;-1/6
(print-rat (sub-rat new-one-half new-one-third))
;3/2
(print-rat (div-rat new-one-half new-one-third))

(define (element-of-set? x set)
  (cond ((null? set) false)
        ((equal? x (car set)) true)
        (else (element-of-set? x (cdr set)))))

(define (adjoin-set x set)
  (cons x set))

(define (remove-element x set)
  (define (iter-remove old-set result)
    (if (not (= x (car old-set)))
        (iter-remove (cdr old-set) (cons (car old-set) result))
        (append result (cdr old-set))))
  (iter-remove set '()))


(define (intersection-set set1 set2)
  (cond ((or (null? set1) (null? set2)) '())
        ((element-of-set? (car set1) set2)
         (cons (car set1) 
               (intersection-set (cdr set1) 
                                 (remove-element (car set1) set2))))
        (else (intersection-set (cdr set1) set2))))

(define nil '())
(define (union-set union-set1 union-set2)
  (append union-set1 union-set2))

(define x (list 1 2 3 4 5 4 3 2 1))
(define y (list 1 3 5 7 5 3 3 1))
;(1 3 5 3 1)
(intersection-set x y)
;(1 2 3 4 5 4 3 2 1 1 3 5 7 5 3 3 1)
(union-set x y)

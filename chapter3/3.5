(define (square x) (* x x))
(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (random range))))
(define (p p1 p2 x1 x2 y1 y2)
  (let ((x (/ (+ x1 x2) 2))
        (y (/ (+ y1 y2) 2))
        (r (/ (- x2 x1) 2)))
    (<= (+ (square (- p1 x)) (square (- p2 y))) (square r))))


(define (estimate-integral p x1 x2 y1 y2 trials)
  (define (iter trials-remaining trials-passed)
    (let ((p1 (random-in-range x1 x2))
          (p2 (random-in-range y1 y2)))
      (cond ((= trials-remaining 0)
             (* (/ trials-passed trials) (* (- x2 x1) (- y2 y1))))
            ((p p1 p2 x1 x2 y1 y2)
             (iter (- trials-remaining 1)
                   (+ trials-passed 1)))
            (else
             (iter (- trials-remaining 1)
                   trials-passed)))))
  (iter trials 0))
;26 + 241/250
(estimate-integral p 2 8 4 10 10000)

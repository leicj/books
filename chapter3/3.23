(define (front-ptr deque) (car deque))
(define (rear-ptr deque) (cdr deque))
(define (set-front-ptr! deque item)
  (set-car! deque item))
(define (set-rear-ptr! deque item)
  (set-cdr! deque item))

(define (empty-deque? deque)
  (null? (front-ptr deque)))

(define (make-deque) (cons '() '()))

(define (front-deque deque)
  (if (empty-deque? deque)
      (error "FRONT called with an empty deque" deque)
      (car (front-ptr deque))))

(define (rear-deque deque)
  (if (empty-deque? deque)
      (error "REAR-DEQUE call with an empty deque" deque)
      (car (rear-ptr deque))))

(define (front-insert-deque! deque item)
  (let ((new-pair (cons item '())))
    (cond ((empty-deque? deque)
           (set-front-ptr! deque new-pair)
           (set-rear-ptr! deque new-pair)
           deque)
          (else
           (set-cdr! (rear-ptr deque) new-pair)
           (set-rear-ptr! deque new-pair)
           deque))))

(define (rear-delete-deque! deque)
  (cond ((empty-deque? deque)
         (error "DELETE! called with an empty deque" deque))
        (else (set-front-ptr! deque (cdr (front-ptr deque)))
              deque)))

(define (rear-insert-deque! deque item)
  (cond ((empty-deque? deque)
         (front-insert-deque! deque item))
        (else
         (set-front-ptr! deque (cons item (front-ptr deque)))
         deque)))

(define (front-delete-deque! deque)
  (define (iter deque lst)
    (cond ((null? (cdr (cdr lst)))
           (set-cdr! lst '())
           (set-rear-ptr! deque lst)
           deque)
          (else
           (iter deque (cdr lst)))))
  (cond ((empty-deque? deque)
         (error "DELETE-FRONT-DEQUE! called with an empty deque" deque))
        ((null? (cdr (front-ptr deque)))
         (set-front-ptr! deque '())
         deque)
        (else
         (iter deque (front-ptr deque)))))

(define (print-queue queue) (car queue))

(define deque (make-deque))
;((a) a)
(front-insert-deque! deque 'a)
;((a b) b)
(front-insert-deque! deque 'b)
;((c a b) b)
(rear-insert-deque! deque 'c)
;((d c a b) b)
(rear-insert-deque! deque 'd)
;((c a b) b)
(rear-delete-deque! deque)
;((c a) a)
(front-delete-deque! deque)

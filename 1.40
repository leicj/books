(define (deriv g)
  (lambda (x) (/ (- (g (+ x dx)) (g x)) dx)))
(define dx 0.00001)
(define (newton-transform g)
  (lambda (x) (- x (/ (g x) ((deriv g) x)))))
(define (newtons-method g guess)
  (fixed-point (newton-transform g) guess))
(define (square x) (* x x))
(define (cube x) (* x x x))
(define (sqrt-new x)
  (newtons-method
   (lambda (y) (- (square y) x)) 1.0))

(define tolerance 0.00001)
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))

(define (cubic a b c)
  (newtons-method
   (lambda (x) (+ (cube x) (* a (square x)) (* b x) c)) 1.0))

;-1.2756822036498454
(cubic 1 2 3)
(define m -1.2756822036498454)
;4.935607478273596e-12
(+ (cube m) (square m) (* 2 m) 3)


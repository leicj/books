(define (cube x) (* x x x))

(define (sum term a next b)
  (if (> a b)
      0
      (+ (term a)
         (sum term (next a) next b))))

(define (sum-iteraction term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (+ result (term a)))))
  (iter a 0))

(define (integral f a b dx)
  (define (add-dx x)
    (+ x dx))
  (* (sum-iteraction f (+ a (/ dx 2.0)) add-dx b)
     dx))

;0.24998750000000042
(integral cube 0 1 0.01)
;0.249999875000001
(integral cube 0 1 0.001)

(define (simpson f a b n)
  (define h (/ (- b a) n))
  (define (y k)
    (f (+ a (* k h))))
  (define (factor k)
    (cond ((or (= 0 k) (= k n))
           1)
          ((odd? k)
           4)
          (else
           2)))
  (define (term k)
    (* (factor k) (y k)))
  (define (next k)
    (+ k 1))
  (* (/ h 3.0)
     (sum term 0.0 next n)))
;0.24999999999999992
(simpson cube 0 1 100)
;0.2500000000000003
(simpson cube 0 1 1000)

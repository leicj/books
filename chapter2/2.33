(define nil '())

(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

(define (map-new p sequence)
  (accumulate (lambda (x y) (cons (p x) y)) nil sequence))
;(1 2 3 4)
(map-new abs (list -1 2 -3 4))

(define (append-new seq1 seq2)
  (accumulate cons seq2 seq1))
;(1 2 3 4 5 6)
(append-new (list 1 2 3) (list 4 5 6))

(define (length-new sequence)
  (accumulate (lambda (x y) (+ 1 y)) 0 sequence))
;5
(length-new (list 1 2 3 4 5))

(define nil '())

(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

(define (accumulate-n op init seqs)
  (if (null? (car seqs))
      nil
      (cons (accumulate op init (map car seqs))
            (accumulate-n op init (map cdr seqs)))))

(define matrix (list (list 1 2 3 4) (list 4 5 6 6) (list 6 7 8 9)))
(define matrix-1 (list (list 1 2 3) (list 4 5 6) (list 7 8 9) (list 10 11 12)))
(define x1 (list 1 2 3 4))
(define x2 (list 5 6 7 8))

(define (dot-product v w)
  (accumulate + 0 (map * v w)))
;70
(dot-product x1 x2)

(define (matrix-*-vector m v)
  (map (lambda (x) (dot-product v x)) m))
;(30 56 80)
(matrix-*-vector matrix x1)

(define (transpose mat)
  (accumulate-n cons nil mat))
;((1 4 6) (2 5 7) (3 6 8) (4 6 9))
(transpose matrix)

(define (matrix-*-matrix m n)
  (let ((cols (transpose n)))
    (map 
     (lambda (x) (map (lambda (y) (dot-product x y)) cols)) 
     m)))
;((70 80 90) (126 147 168) (180 210 240))
(matrix-*-matrix matrix matrix-1)

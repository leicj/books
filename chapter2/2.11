(define (make-interval a b) (cons a b))
(define (upper-bound interval) (max (car interval) (cdr interval)))
(define (lower-bound interval) (min (car interval) (cdr interval)))

;; old multiplication
(define (old-mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))

;new multiplication
(define (mul-interval x y)
  ; endpoint-sign returns:
  ;+1 if both endpoints non-negative
  ;-1 if both negative
  ;0 if opposite sign
  (define (endpoint-sign i)
    (cond ((and (>= (upper-bound i) 0)
                (>= (lower-bound i) 0))
           1)
          ((and (< (upper-bound i) 0)
                (< (lower-bound i) 0))
           -1)
          (else 0)))
  (let ((es-x (endpoint-sign x))
        (es-y (endpoint-sign y))
        (x-up (upper-bound x))
        (x-lo (lower-bound x))
        (y-up (upper-bound y))
        (y-lo (lower-bound y)))
    (cond ((> es-x 0)
           (cond ((> es-y 0)
                  (make-interval (* x-lo y-lo) (* x-up y-up)))
                 ((< es-y 0)
                  (make-interval (* x-up y-lo) (* x-lo y-up)))
                 (else
                  (make-interval (* x-up y-lo) (* x-up y-up)))))
          ((< es-x 0)
           (cond ((> es-y 0)
                  (make-interval (* x-lo y-up) (* x-up y-lo)))
                 ((< es-y 0)
                  (make-interval (* x-up y-up) (* x-lo y-lo)))
                 (else
                  (make-interval (* x-lo y-up) (* x-lo y-lo)))))
          (else
           (cond ((> es-y 0)
                  (make-interval (* x-lo y-up) (* x-up y-up)))
                 ((< es-y 0)
                  (make-interval (* x-up y-lo) (* x-lo y-lo)))
                 (else
                  (make-interval (min (* x-lo y-up) (* x-up y-lo))
                                 (max (* x-lo y-lo) (* x-up y-up))))))))
  )
  
(define x1 (cons 9 11))
(define y1 (cons 9 11))
(define x2 (cons -9 11))
(define y2 (cons -9 11))
(define x3 (cons -11 -9))
(define y3 (cons -11 -9))
;(81 . 121)
(mul-interval x1 y1)
;(-99 . 121)
(mul-interval x1 y2)
;(-121 . -81)
(mul-interval x1 y3)
;(-99 . 121)
(mul-interval x2 y1)
;(-99 . 121)
(mul-interval x2 y2)
;(-121 . 99)
(mul-interval x2 y3)
;(-121 . -81)
(mul-interval x3 y1)
;(-121 . 99)
(mul-interval x3 y2)
;(81 . 121)
(mul-interval x3 y3)

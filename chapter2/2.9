(define (make-interval a b) (cons a b))
;add
(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))
;mid-add
(define (mid-add-interval x y)
  (make-interval (average (+ (lower-bound x) (lower-bound y)))
                 (average (+ (upper-bound x) (upper-bound y)))))
=>
(mid-add-interval x y) = (/ (add-interval x y) 2)

;sub
(define (sub-interval x y)
  (make-interval (- (lower-bound x) (upper-bound y))
                 (- (upper-bound x) (lower-bound y))))
;mid-sub
(define (mid-sub-interval x y)
  (make-interval (average (- (lower-bound x) (upper-bound y)))
                 (average (- (upper-bound x) (lower-bound y)))))
=> (mid-sub-interval x y) = (/ (sub-interval x y) 2)

;mul
(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))
;mid-mul
(define (mid-mul-interval x y)
  (let ((p1 (square (average (lower-bound x) (lower-bound y))))
        (p2 (square (average (lower-bound x) (upper-bound y))))
        (p3 (square (average (upper-bound x) (lower-bound y))))
        (p4 (square (average (upper-bound x) (upper-bound y)))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))
=> (mid-mul-interval x y) is not a function to (mul-interval x y)

;div
(define (div-interval x y)
  (mul-interval
   x
   (make-interval (/ 1.0 (upper-bound y))
                  (/ 1.0 (lower-bound y)))))
;mid-div
(define (mid-div-interval x y)
  (mid-mul-interval x (make-interval (/ 1.0 (upper-bound y))
                                     (/ 1.0 (lower-bound y)))))
=> (mid-div-interval x y) is not a function to (div-interval x y)


;lower-bound
(define (lower-bound x) (car x))
;upper-bound
(define (upper-bound x) (cdr x))





(define nil '())

(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

(define (count-leaves t)
  (accumulate +
              0 
              (map (lambda (node)
                     (cond ((not (pair? node)) 1)
                           (else (count-leaves node))))
                   t)))

(define x (cons (list 1 2) (list 3 4)))
(define y (list x x))
(count-leaves x)
(count-leaves y)

1. 字符串长度: 字符的个数,不包括结尾的'\0'
/*
** 计算字符串参数的长度
*/
#include <stddef.h>

size_t strlen(char const *string)
{
	int length;
	for (length = 0; *string++ != '\0')
		length += 1;
	return length;
}
注意: strlen返回的是size_t类型,所以strlen(x) - strlen(y) >= 0永远为真.

2. 不受限制的字符串函数(不推荐使用)
char *strcpy(char *dst, char const *src);
这个函数把参数src字符串复制到dst参数.如果参数src和dst在内存中出现重叠,其结果是未定义的.由于dst参数将进行修改,所以它必须是个字符数组或是一个指向动态分配内存的数组的指针,不能使用字符串常量.
注意: 要保证dst的空间足以容纳需要复制的字符串.

char *strcat(char *dst, char const *src);
把一个字符串添加到另一个字符串的后面.
注意: 要保证dst的空间足以容纳所有添加的字符串.

int strcmp(char const *s1, char const *s2);
按照字典比较两个字符串.
相等返回0,s1 > s2返回值大于0,否则返回值小于0

3. 长度首先的字符串函数
char *strncpy(char *dst, char const *src, size_t len);
此函数总是正好想dst写入len个字符.如果strlen(src)的值小于len,dst数组就用额外的NUL字节填充到len长度.如果strlen(src)的值大于或等于len,那么只有len个字符被复制到dst中.
注意: 它的结果将不会以NUL字节结尾.

char *strncat(char *dst, char const *src, size_t len);
从src中最多复制len个字符到目标数组的后面,且总是添加一个NUL字节.

int strncmp(char const *s1, char const *s2, size_t len);
只比较len个字符.

4. 字符串查找
char *strchr(char const *str, int ch);
char *strrchr(char const *str, int ch);
strchr在字符串中查找ch第一次出现的位置,返回其位置的指针.
strrchr查找最后一次出现的位置.

char *strpbrk(char const *str, char const *group);
查找group中任意一个字符在str中第一次出现的位置.

char *strstr(char const *s1, char const *s2);
查找s2在s1中第一次出现的位置.

5. 字符操作
iscntrl:任何控制字符
isspace:空白字符
isdigit:十进制数字0-9
isxdigit: 十六进制数字
islower:小写字母a-z
isupper:大写字母A-Z
isalpha:字母a-z或A-Z
isalnum:字母或数字
ispunct:标点符号
isgraph:任何图形字符
isprint:任何可打印字符
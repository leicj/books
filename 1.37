(define (cont-frac-recursive n d k)
  (define (iter-cont-frac index)
    (if (= index k)
        (/ (n index) (d index))
        (/ (n index) (+ (d index)
                        (iter-cont-frac (+ index 1))))))
  (iter-cont-frac 1))

(define (cont-frac-iteration n d k)
  (define (iter-cont-frac result index)
    (if (= index 1)
        result
        (iter-cont-frac (/ (n index) (+ (d index) result)) (- index 1))))
  (iter-cont-frac (/ (n k) (d k)) k))

(/ 1 (cont-frac-recursive (lambda (i) 1.0)
           (lambda (i) 1.0)
           100))

(/ 1 (cont-frac-iteration (lambda (i) 1.0)
           (lambda (i) 1.0)
           100))

练习13.1：
	拷贝构造函数定义了用同类型的另一个对象初始化本对象时做什么。
	当对象中的成员变量存在类对象时候，通常需要拷贝构造函数来初始化。
练习13.2：
	Sales_data::Sales_data(Sales_data rhs);
这拷贝构造函数，如果用来初始化一个非引用类型，则会陷入无限循环中。
练习13.3：
	当我们拷贝一个对象，实际上是拷贝该对象的各个成员变量。如果变量为内建类型，则直接拷贝；如果为类类型，则需要调用此类的拷贝对象进行拷贝。
	对于一个指针，实际上我们拷贝的不能是其地址，应该是其值。
	考虑这种情况，对象存在一个指针变量，在构建时候动态分配内存，在析构函数中进行内存的释放。但如果在拷贝时候，将地址拷贝过去，则析构时候会出现A,B两个对象，A将指针空间释放，但是B再次析构时候，会释放已经释放的空间，出现错误。
练习13.4：
	Point local = arg;	//拷贝初始化
	*heap = local;	//拷贝初始化
	Point pa[4] = {local, *heap};	//将*heap拷贝初始化给pa[4]
	return *heap;	//将*heap变量返回，拷贝初始化
练习13.5：
	参考13.5.cpp，注意ps需要动态分配空间。
练习13.6：
	拷贝赋值运算符定义将一个对象赋予同类型的另一个对象时候做什么。
	通常对象的成员变量存在类变量时候，需要使用拷贝赋值运算符。
	合并拷贝赋值运算符是当我们未定义拷贝赋值运算符时，编译器自动生成的。
练习13.7：
	我们赋值一个对象时，如果是内置类型，则同样直接赋值。但是如果是类类型，则会调用其类的赋值运算。
	如果是赋值指针时候，同样需要动态生成指针的值，然后进行赋值，而非将指针所代表的地址赋值过去。
练习13.8：
	参考13.8.cpp
练习13.9：
	析构函数用于定义对象销毁时，需要做什么。如果未定义析构函数，则会合成析构函数。但合成析构函数实际上什么都不做，而成员会默认进行销毁。
13.10：
	如果销毁一个类成员变量，则会调用其本身的析构函数。但是如果销毁指针，我们需要释放其内存空间，并且如果是类指针，还得调用其本身的析构函数。
13.11：
	参考13.11.cpp
13.12:
	三次： accum，item1和item2
练习13.13：
	参考13.11.cpp
练习13.14：
	均输出a.mysn,因为只有a调用默认构造函数，b,c均调用拷贝构造函数。
	参考13.14.cpp
练习13.15:
	参考13.15.cpp.这里结果会改变，因为f(numbered s)在传递实参时候，已经调用了拷贝构造函数。
练习13.16：
	参考13.16.cpp.由于函数f中并不调用拷贝构造函数，则结果不同于13.15.cpp。
练习13.18：
	参考13.18.cpp
练习13.19:
	需要拷贝控制成员。因为_sn在默认赋值情况下，会导致不同的雇员的sn号相同。
	参考13.19.cpp
练习13.20,13.21：
	pass.因为没看第12章
练习13.22：
	参考13.22.cpp。 这里需要注意一点是：析构函数里面需要判断，delete的是否可能是NULL指针。
练习13.24：
	如果未定义析构函数，则编译器会默认定义一个析构函数，并且能正确释放资源。
	但是如果不定义拷贝构造函数，或者赋值运算符，则会导致析构函数会重复释放相同的ps，导致异常。
练习13.25,13.26:
	pass.第12章还未看
练习13.27：
	参考13.27.cpp
练习13.28：
	参考13.28.cpp
练习13.29：
	因为引用并不会产生一个新对象，所以不可能会通过产生新对象导致无限swap循环。
练习13.30：
	参考13.30.cpp
练习13.31：
	参考练习13.31.cpp
练习13.32：
	如果用到swap，如排序时，则有用处。否则用处不大。
练习13.33~13.38:
	参考message.cpp

练习13.45：
	右值引用可绑定到一个临时的对象上，此临时对象将要被销毁，并且没有其他的用户。
	左值绑定到一个具体的对象上，该对象在内存中占有空间。
练习13.46：
	int f();
	vector<int> vi(100);
	int &&r1 = f();
	int &r2 = vi[0];
	int &r3 = r1;
	int &&r4 = vi[0] * f();